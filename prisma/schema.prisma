// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Healthcare Provider Model
model Provider {
  id              String   @id @default(cuid())
  email           String   @unique
  licenseNumber   String   @unique
  licenseState    String
  licenseCountry  String
  licenseExpiry   DateTime
  licenseVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  submissions     Submission[]
  diagnoses       Diagnosis[]
  
  @@index([licenseNumber])
  @@index([email])
}

// Patient Case Submission Model
model Submission {
  id              String   @id @default(cuid())
  providerId      String
  provider        Provider @relation(fields: [providerId], references: [id])
  
  // De-identified patient data
  imageUrl        String
  imageHash       String   @unique // For duplicate detection
  
  // Clinical information
  duration        String? // How long patient has had condition
  symptoms        String?
  treatments      String?
  
  // AI Analysis
  aiProvider      String // claude, openai, gemini, etc.
  aiModel         String
  aiResponse      Json? // Structured AI response
  icd11Code       String?
  confidence      Float?
  
  // Metadata
  status          SubmissionStatus @default(PENDING)
  qualityScore    Float?
  reviewedBy      String?
  reviewedAt      DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  diagnoses       Diagnosis[]
  
  @@index([providerId])
  @@index([status])
  @@index([createdAt])
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  UNDER_REVIEW
  APPROVED_FOR_PRACTICE
}

// Practice Feed Diagnosis Model
model Diagnosis {
  id            String   @id @default(cuid())
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id])
  providerId    String
  provider      Provider @relation(fields: [providerId], references: [id])
  
  icd11Code     String
  notes         String?
  confidence    Float?
  
  createdAt     DateTime @default(now())
  
  @@index([submissionId])
  @@index([providerId])
  @@index([icd11Code])
}

// Model Health Check Log
model ModelHealthCheck {
  id            String   @id @default(cuid())
  provider      String // claude, openai, etc.
  model         String
  status        String // operational, degraded, down
  responseTime  Float // in milliseconds
  errorMessage  String?
  checkedAt     DateTime @default(now())
  
  @@index([provider, model])
  @@index([checkedAt])
}
